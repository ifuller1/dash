// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Selected$ReactTemplate = require("../assets/Selected.bs.js");
var CommonStyles$ReactTemplate = require("../constants/CommonStyles.bs.js");

var borderStyles = Css.borderBottom(Css.px(1), Css.solid, Css.hex("e2e2e2"));

var autoCompleteContainer = Css.style(/* :: */[
      Css.flexGrow(1),
      /* :: */[
        Css.background(Css.white),
        /* :: */[
          borderStyles,
          /* [] */0
        ]
      ]
    ]);

var autoCompleteResults = Css.style(/* :: */[
      Css.overflowY(Css.scroll),
      /* :: */[
        Css.height(Css.px(90)),
        /* :: */[
          Css.overflowX(Css.hidden),
          /* :: */[
            Css.border(Css.px(10), Css.solid, Css.white),
            /* [] */0
          ]
        ]
      ]
    ]);

function title() {
  return Css.style(/* :: */[
              Css.fontSize(CommonStyles$ReactTemplate.fontSizeSmall),
              /* :: */[
                Css.paddingBottom(Css.px(4)),
                /* :: */[
                  Css.paddingLeft(Css.px(0)),
                  /* :: */[
                    Css.padding(Css.px(10)),
                    /* :: */[
                      Css.display(Css.flexBox),
                      /* :: */[
                        Css.firstChild(/* :: */[
                              Css.paddingRight(Css.px(10)),
                              /* [] */0
                            ]),
                        /* :: */[
                          Css.alignItems(Css.center),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function actionButton(disabled) {
  return Css.style(/* :: */[
              Css.background(disabled !== 0 ? Css.darkgray : Css.white),
              /* :: */[
                Css.border(Css.px(1), Css.solid, Css.black),
                /* :: */[
                  Css.borderRadius(Css.px(3)),
                  /* [] */0
                ]
              ]
            ]);
}

var autoCompleteInput = Css.style(/* :: */[
      Css.paddingTop(Css.px(4)),
      /* :: */[
        Css.padding(Css.px(10)),
        /* :: */[
          Css.boxSizing(Css.borderBox),
          /* :: */[
            Css.fontFamily(CommonStyles$ReactTemplate.fontFamily),
            /* :: */[
              Css.fontSize(CommonStyles$ReactTemplate.fontSizeNormal),
              /* :: */[
                Css.width(Css.pct(100.0)),
                /* :: */[
                  Css.backgroundColor(Css.hex("f9f9f9")),
                  /* :: */[
                    borderStyles,
                    /* :: */[
                      Css.borderStyle(Css.none),
                      /* :: */[
                        Css.selector("::placeholder", /* :: */[
                              Css.color(Css.hex("d4d4d4")),
                              /* [] */0
                            ]),
                        /* :: */[
                          Css.focus(/* :: */[
                                borderStyles,
                                /* :: */[
                                  Css.outlineStyle(Css.none),
                                  /* [] */0
                                ]
                              ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

var autoCompleteHeader = Css.style(/* :: */[
      Css.fontSize(CommonStyles$ReactTemplate.fontSizeSmall),
      /* :: */[
        Css.backgroundColor(Css.hex("f9f9f9")),
        /* :: */[
          Css.color(CommonStyles$ReactTemplate.textBlackLight),
          /* :: */[
            Css.paddingBottom(Css.px(2)),
            /* :: */[
              Css.padding(Css.px(10)),
              /* [] */0
            ]
          ]
        ]
      ]
    ]);

var autoCompleteInputGroup = Css.style(/* :: */[
      Css.display(Css.flexBox),
      /* :: */[
        Css.flexDirection(Css.row),
        /* :: */[
          Css.children(/* :: */[
                Css.flexGrow(1),
                /* [] */0
              ]),
          /* [] */0
        ]
      ]
    ]);

var magnifier = Css.style(/* :: */[
      Css.color(Css.red),
      /* :: */[
        Css.margin(Css.px(6)),
        /* [] */0
      ]
    ]);

var Style = /* module */[
  /* borderStyles */borderStyles,
  /* autoCompleteContainer */autoCompleteContainer,
  /* autoCompleteResults */autoCompleteResults,
  /* title */title,
  /* actionButton */actionButton,
  /* autoCompleteInput */autoCompleteInput,
  /* autoCompleteHeader */autoCompleteHeader,
  /* autoCompleteInputGroup */autoCompleteInputGroup,
  /* magnifier */magnifier
];

function filterText(text) {
  return text.toLowerCase().replace((/\s*/g), "");
}

function getFilterStations(stations, inputText) {
  var filteredInputText = filterText(inputText);
  return Belt_Array.keep(stations, (function (station) {
                if (filterText(station[/* name */0]).indexOf(filteredInputText) >= 0) {
                  return /* true */1;
                } else {
                  return +(filterText(station[/* crsCode */1]).indexOf(filteredInputText) >= 0);
                }
              }));
}

function filterInputDate(state, inputText) {
  var filteredInputText = filterText(inputText);
  console.log("" + (String(filteredInputText) + ""));
  return /* Update */Block.__(0, [/* record */[
              /* inputText */inputText,
              /* matchedStations */getFilterStations(state[/* allStations */2], inputText),
              /* allStations */state[/* allStations */2],
              /* selectedStation */state[/* selectedStation */3]
            ]]);
}

function initialState(stations, selectedStation, _) {
  var inputText = selectedStation ? selectedStation[0][/* name */0] : "";
  var matchedStations = inputText === "" ? stations : getFilterStations(stations, inputText);
  return /* record */[
          /* inputText */inputText,
          /* matchedStations */matchedStations,
          /* allStations */stations,
          /* selectedStation */selectedStation
        ];
}

function onInputChange(send, $$event) {
  return Curry._1(send, /* Update */Block.__(0, [$$event.target.value]));
}

function onStationClick(send, onSelection, station, _) {
  Curry._1(onSelection, station);
  return Curry._1(send, /* SelectStation */Block.__(1, [station]));
}

function reducer(action, state) {
  if (action.tag) {
    var station = action[0];
    return /* Update */Block.__(0, [/* record */[
                /* inputText */station[/* name */0],
                /* matchedStations */state[/* matchedStations */1],
                /* allStations */state[/* allStations */2],
                /* selectedStation : Some */[station]
              ]]);
  } else {
    return filterInputDate(state, action[0]);
  }
}

var component = ReasonReact.reducerComponentWithRetainedProps("AutoCompleteSelector");

function make(stations, onSelection, selectedStation, header, _) {
  var newrecord = component.slice();
  newrecord[/* willReceiveProps */3] = (function (self) {
      var retainedStation = self[/* retainedProps */2];
      if (Caml_obj.caml_notequal(selectedStation, retainedStation) && selectedStation) {
        return initialState(stations, /* Some */[selectedStation[0]], /* () */0);
      } else {
        return self[/* state */1];
      }
    });
  newrecord[/* render */9] = (function (self) {
      var partial_arg = self[/* send */3];
      var tmp;
      if (self[/* state */1][/* matchedStations */1].length) {
        var endIndex = Math.min(100, Math.max(self[/* state */1][/* matchedStations */1].length, self[/* state */1][/* matchedStations */1].length - 2500 | 0));
        tmp = $$Array.mapi((function (index, station) {
                var stationName = station[/* name */0];
                var stationCode = station[/* crsCode */1];
                var selected = Caml_obj.caml_equal(self[/* state */1][/* selectedStation */3], /* Some */[station]);
                var partial_arg = self[/* send */3];
                return React.createElement("div", {
                            key: "index_" + (String(index) + ""),
                            className: title(selected),
                            onClick: (function (param) {
                                return onStationClick(partial_arg, onSelection, station, param);
                              })
                          }, "" + (String(stationName) + (" (" + (String(stationCode) + ")"))), selected !== 0 ? ReasonReact.element(/* None */0, /* None */0, Selected$ReactTemplate.make(/* array */[])) : null);
              }), $$Array.sub(self[/* state */1][/* matchedStations */1], 0, endIndex));
      } else {
        tmp = null;
      }
      return React.createElement("div", {
                  className: autoCompleteContainer
                }, React.createElement("div", {
                      className: autoCompleteHeader
                    }, "" + (String(header) + "")), React.createElement("div", {
                      className: autoCompleteInputGroup
                    }, React.createElement("input", {
                          className: autoCompleteInput,
                          placeholder: "...",
                          value: self[/* state */1][/* inputText */0],
                          onChange: (function (param) {
                              return onInputChange(partial_arg, param);
                            })
                        })), React.createElement("div", {
                      className: autoCompleteResults
                    }, React.createElement("div", undefined, tmp)));
    });
  newrecord[/* initialState */10] = (function (param) {
      return initialState(stations, selectedStation, param);
    });
  newrecord[/* retainedProps */11] = selectedStation;
  newrecord[/* reducer */12] = reducer;
  return newrecord;
}

exports.Style = Style;
exports.filterText = filterText;
exports.getFilterStations = getFilterStations;
exports.filterInputDate = filterInputDate;
exports.initialState = initialState;
exports.onInputChange = onInputChange;
exports.onStationClick = onStationClick;
exports.reducer = reducer;
exports.component = component;
exports.make = make;
/* borderStyles Not a pure module */
