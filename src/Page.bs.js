// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/src/Css.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Header$ReactTemplate = require("./components/Header.bs.js");
var Spinner$ReactTemplate = require("./components/Spinner.bs.js");
var StationList$ReactTemplate = require("./requests/StationList.bs.js");
var CommonStyles$ReactTemplate = require("./constants/CommonStyles.bs.js");
var RouteResults$ReactTemplate = require("./components/RouteResults.bs.js");
var SettingsList$ReactTemplate = require("./requests/SettingsList.bs.js");
var AutoCompleteSelector$ReactTemplate = require("./components/AutoCompleteSelector.bs.js");

Css.$$global("body", /* :: */[
      Css.background(Css.hex("edf9ff")),
      /* :: */[
        Css.height(Css.vh(100.0)),
        /* :: */[
          Css.padding(Css.px(0)),
          /* :: */[
            Css.margin(Css.px(0)),
            /* :: */[
              Css.fontFamily(CommonStyles$ReactTemplate.fontFamily),
              /* :: */[
                Css.fontSize(CommonStyles$ReactTemplate.fontSizeNormal),
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]);

var page = Css.style(/* :: */[
      Css.overflow(Css.hidden),
      /* :: */[
        Css.display(Css.flexBox),
        /* :: */[
          Css.flexDirection(Css.column),
          /* :: */[
            Css.color(CommonStyles$ReactTemplate.textBlack),
            /* :: */[
              Css.justifyContent(Css.flexStart),
              /* :: */[
                Css.boxSizing(Css.borderBox),
                /* :: */[
                  Css.height(Css.vh(100.0)),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]);

function actionButton(disabled) {
  return Css.style(/* :: */[
              Css.background(disabled !== 0 ? Css.darkgray : Css.white),
              /* :: */[
                Css.border(Css.px(1), Css.solid, Css.black),
                /* :: */[
                  Css.borderRadius(Css.px(3)),
                  /* [] */0
                ]
              ]
            ]);
}

var spinnerContainer = Css.style(/* :: */[
      Css.height(Css.pct(100.0)),
      /* :: */[
        Css.padding(Css.px(10)),
        /* [] */0
      ]
    ]);

var Style = /* module */[
  /* page */page,
  /* actionButton */actionButton,
  /* spinnerContainer */spinnerContainer
];

function fetchStationList(send) {
  StationList$ReactTemplate.fetchStationList((function (payload) {
          return Curry._1(send, /* Loaded */Block.__(2, [payload]));
        }));
  return /* () */0;
}

function fetchSettings(send) {
  SettingsList$ReactTemplate.fetchSettings((function (payload) {
          return Curry._1(send, /* SettingsLoaded */Block.__(3, [payload]));
        }));
  return /* () */0;
}

var component = ReasonReact.reducerComponent("Page");

function onFromSelected(send, station) {
  return Curry._1(send, /* FromSelected */Block.__(0, [station]));
}

function onToSelected(send, station) {
  return Curry._1(send, /* ToSelected */Block.__(1, [station]));
}

function initialState() {
  return /* record */[
          /* stations : array */[],
          /* fromStation : None */0,
          /* toStation : None */0,
          /* settings : None */0
        ];
}

function getStartStation(state) {
  var match = state[/* settings */3];
  if (match) {
    return match[0][/* startStationOption */0];
  } else {
    return /* None */0;
  }
}

function getReturnStation(state) {
  var match = state[/* settings */3];
  if (match) {
    return match[0][/* endStationOption */1];
  } else {
    return /* None */0;
  }
}

function getFromStation(state) {
  var match = state[/* fromStation */1];
  if (match) {
    return state[/* fromStation */1];
  } else {
    return getStartStation(state);
  }
}

function getToStation(state) {
  var match = state[/* toStation */2];
  if (match) {
    return state[/* toStation */2];
  } else {
    return getReturnStation(state);
  }
}

function onSwapRoutes(send, _) {
  return Curry._1(send, /* SwapSettings */2);
}

function swapSettings(state) {
  var from = state[/* fromStation */1];
  var tos = state[/* toStation */2];
  console.log("to - from: " + (String(tos) + (" - " + (String(from) + ""))));
  return /* Update */Block.__(0, [/* record */[
              /* stations */state[/* stations */0],
              /* fromStation */getToStation(state),
              /* toStation */getFromStation(state),
              /* settings */state[/* settings */3]
            ]]);
}

function reducer(action, state) {
  if (typeof action === "number") {
    switch (action) {
      case 0 : 
          return /* SideEffects */Block.__(1, [(function (self) {
                        return fetchStationList(self[/* send */3]);
                      })]);
      case 1 : 
          return /* SideEffects */Block.__(1, [(function (self) {
                        return fetchSettings(self[/* send */3]);
                      })]);
      case 2 : 
          return swapSettings(state);
      
    }
  } else {
    switch (action.tag | 0) {
      case 0 : 
          var station = action[0];
          return /* UpdateWithSideEffects */Block.__(2, [
                    /* record */[
                      /* stations */state[/* stations */0],
                      /* fromStation : Some */[station],
                      /* toStation */state[/* toStation */2],
                      /* settings */state[/* settings */3]
                    ],
                    (function () {
                        return SettingsList$ReactTemplate.saveFromStation(station);
                      })
                  ]);
      case 1 : 
          var station$1 = action[0];
          return /* UpdateWithSideEffects */Block.__(2, [
                    /* record */[
                      /* stations */state[/* stations */0],
                      /* fromStation */state[/* fromStation */1],
                      /* toStation : Some */[station$1],
                      /* settings */state[/* settings */3]
                    ],
                    (function () {
                        return SettingsList$ReactTemplate.saveToStation(station$1);
                      })
                  ]);
      case 2 : 
          return /* Update */Block.__(0, [/* record */[
                      /* stations */action[0],
                      /* fromStation */state[/* fromStation */1],
                      /* toStation */state[/* toStation */2],
                      /* settings */state[/* settings */3]
                    ]]);
      case 3 : 
          return /* Update */Block.__(0, [/* record */[
                      /* stations */state[/* stations */0],
                      /* fromStation */state[/* fromStation */1],
                      /* toStation */state[/* toStation */2],
                      /* settings */action[0]
                    ]]);
      
    }
  }
}

function make(message, _) {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      fetchStationList(self[/* send */3]);
      return fetchSettings(self[/* send */3]);
    });
  newrecord[/* render */9] = (function (param) {
      var send = param[/* send */3];
      var state = param[/* state */1];
      var tmp;
      if (state[/* stations */0].length > 0 && state[/* settings */3] !== /* None */0) {
        var match = getToStation(state);
        var match$1 = getFromStation(state);
        tmp = React.createElement("div", undefined, ReasonReact.element(/* Some */["1"], /* None */0, AutoCompleteSelector$ReactTemplate.make(state[/* stations */0], (function (param) {
                        return Curry._1(send, /* FromSelected */Block.__(0, [param]));
                      }), getFromStation(state), "From", /* array */[])), ReasonReact.element(/* Some */["2"], /* None */0, AutoCompleteSelector$ReactTemplate.make(state[/* stations */0], (function (param) {
                        return Curry._1(send, /* ToSelected */Block.__(1, [param]));
                      }), getToStation(state), "To", /* array */[])), match && match$1 ? ReasonReact.element(/* None */0, /* None */0, RouteResults$ReactTemplate.make(match[0][/* crsCode */1], match$1[0][/* crsCode */1], (function () {
                          return Curry._1(send, /* SwapSettings */2);
                        }), /* array */[])) : null);
      } else {
        tmp = React.createElement("div", {
              className: spinnerContainer
            }, ReasonReact.element(/* None */0, /* None */0, Spinner$ReactTemplate.make(/* array */[])));
      }
      return React.createElement("div", {
                  className: page
                }, ReasonReact.element(/* None */0, /* None */0, Header$ReactTemplate.make(message, /* array */[])), React.createElement("div", undefined, tmp));
    });
  newrecord[/* initialState */10] = initialState;
  newrecord[/* reducer */12] = reducer;
  return newrecord;
}

var defaultFromStation = /* record */[
  /* name */"Tott",
  /* crsCode */"TOM"
];

var defaultToStation = /* record */[
  /* name */"Stort",
  /* crsCode */"BIS"
];

exports.Style = Style;
exports.fetchStationList = fetchStationList;
exports.fetchSettings = fetchSettings;
exports.component = component;
exports.onFromSelected = onFromSelected;
exports.onToSelected = onToSelected;
exports.defaultFromStation = defaultFromStation;
exports.defaultToStation = defaultToStation;
exports.initialState = initialState;
exports.getStartStation = getStartStation;
exports.getReturnStation = getReturnStation;
exports.getFromStation = getFromStation;
exports.getToStation = getToStation;
exports.onSwapRoutes = onSwapRoutes;
exports.swapSettings = swapSettings;
exports.reducer = reducer;
exports.make = make;
/*  Not a pure module */
